Resources:
  # Create two public subnets for redundancy
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ${aws:region}a
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-subnet-public-a
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ${aws:region}b
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-subnet-public-b
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  # Create an Internet Gateway for the public subnets.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-nat-ig
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route the public subnets to the Internet Gateway.
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-public
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicB

  # Create two elastic IP addresses, one for each NAT Gateway.
  ElasticIPA:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-nat-a-ip
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  ElasticIPB:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-nat-b-ip
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  # Create two NAT Gateways.
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPA.AllocationId
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-nat-a
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPB.AllocationId
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicB
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-nat-b
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  # Route the private subnet A to NAT A.
  RouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-private-a
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  RoutePrivateA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref RouteTablePrivateA

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      SubnetId: !Ref SubnetA

  # Route the private subnet B to NAT B.
  RouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: commons-gateway-${opt:stage}-private-b
        - Key: application
          Value: gateway
        - Key: environment
          Value: ${opt:stage}

  RoutePrivateB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref RouteTablePrivateB

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      SubnetId: !Ref SubnetB
