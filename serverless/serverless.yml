service: commons-gateway

frameworkVersion: '3'

plugins:
  - serverless-deployment-bucket

# Set the deployment type to dev for a stages except `prod`
# This mostly impacts the how CloudFormation allocates resources.
params:
  default:
    deployment: dev
    rollback: false
  prod:
    deployment: prod
    rollback: false

provider:
  name: aws
  region: ${env:AWS_REGION}
  iam:
    role:
      name: CommonsGatewayLambdaRole-${opt:stage}
      statements:
        - Effect: Allow
          Action: rds-db:connect
          Resource: !Join
            - ''
            - - 'arn:aws:rds-db:${aws:region}:${aws:accountId}:dbuser:'
              - !Select [6, !Split [':', !GetAtt RDSProxy.DBProxyArn]]
              - /*
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectTagging
          Resource: !Join
            - ''
            - - !GetAtt UploadBucket.Arn
              - /*
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: !Join
            - ''
            - - !GetAtt CleanBucket.Arn
              - /*
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: !Join
            - ''
            - - !GetAtt StaticSiteBucket.Arn
              - /seed/*
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: arn:aws:ses:${env:AWS_SES_REGION}:${aws:accountId}:identity/${env:AWS_SES_EMAIL}
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: !GetAtt SQSAprimoRecord.Arn
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: !GetAtt SQSSend2FA.Arn
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref SubnetA
      - !Ref SubnetB
  environment:
    DB_HOST: ${self:custom.PROXY_ENDPOINT}
    DB_NAME: ${self:custom.DB_NAME}
    DB_PORT: ${self:custom.DB_PORT}
    DB_REGION: ${env:AWS_REGION}
    DB_USER: ${self:custom.DB_USER}
    JWT_SECRET: ${/aws/reference/secretsmanager/${self:custom.JWT_SECRET_NAME}}
  deploymentBucket:
    name: gpalab-automatic-deployments-${param:deployment}
  disableRollback: ${param:rollback}

useDotenv: true

custom:
  CIDR: 10.0.0.0/16
  DB_NAME: gateway_${opt:stage}
  DB_USER: gateway${opt:stage}
  DB_PORT: !GetAtt RDSInstance.Endpoint.Port
  JWT_SECRET_NAME: commons-gateway-${opt:stage}-jwt
  PROXY_NAME: commons-gateway-proxy-${opt:stage}
  PROXY_ENDPOINT: !GetAtt RDSProxy.Endpoint

resources:
  - ${file(./config/resources/vpc.yml)}
  - ${file(./config/resources/rds.yml)}
  - ${file(./config/resources/proxy.yml)}
  - ${file(./config/resources/cloudfront.yml)}
  - ${file(./config/resources/nat.yml)}
  - ${file(./config/resources/sqs.yml)}
  - ${file(./config/resources/s3.yml)}
  - ${file(./config/resources/secretsmanager.yml)}
  - ${file(./config/resources/jump.yml)} # Optional jump server to access resources via SSH, uncomment to apply

# Defines how the functions are deployed. To reduce the functions
# size for each Lambda, we package them independently. This requires
# us to set the package pattern individually per function.
package:
  individually: true
  patterns:
    - '!./**'

functions:
  authorizer:
    handler: bin/authorizer
    description: Verifies that the request is accompanied by a valid JSON web token.
    runtime: go1.x
    package:
      patterns:
        - './bin/authorizer'
  adminCreate:
    name: gateway-${opt:stage}-admin-create
    handler: bin/admin-create
    description: Add an new email to the list of admin users.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/admin-create/schema.json)}
                name: PostAdminModel
                description: Validation model for creating an admin user.
    package:
      patterns:
        - './bin/admin-create'
  adminDeactivate:
    name: gateway-${opt:stage}-admin-deactivate
    handler: bin/admin-deactivate
    description: Deactivate a single admin user.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            parameters:
              querystrings:
                username: true
    package:
      patterns:
        - './bin/admin-deactivate'
  adminGet:
    name: gateway-${opt:stage}-admin-get
    handler: bin/admin-get
    description: Retrieve an individual admin user.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            parameters:
              querystrings:
                username: true
    package:
      patterns:
        - './bin/admin-get'
  adminUpdate:
    name: gateway-${opt:stage}-admin-update
    handler: bin/admin-update
    description: Update a admin users.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/admin-update/schema.json)}
                name: PutAdminModel
                description: Validation model for updating an admin user.
    package:
      patterns:
        - './bin/admin-update'
  adminsGet:
    name: gateway-${opt:stage}-admins-get
    handler: bin/admins-get
    description: Retrieve the list of admin users.
    runtime: go1.x
    events:
      - http:
          path: /admins
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admins-get'
  aprimoUpload:
    name: gateway-${opt:stage}-aprimo-upload
    handler: bin/aprimo-upload-file
    description: Copies a file from S3 to Aprimo.
    runtime: go1.x
    events:
      - sqs:
          arn: !GetAtt SQSAprimoUpload.Arn
    package:
      patterns:
        - './bin/aprimo-upload-file'
    environment:
      APRIMO_TENANT: ${env:APRIMO_TENANT}
      APRIMO_CLIENT_ID: ${env:APRIMO_CLIENT_ID}
      APRIMO_CLIENT_SECRET: ${env:APRIMO_CLIENT_SECRET}
      RECORD_CREATE_QUEUE: https://${aws:region}.amazonaws.com/${aws:accountId}/content-gateway-${opt:stage}-aprimo-record
  aprimoCreate:
    name: gateway-${opt:stage}-aprimo-create
    handler: bin/aprimo-create-record
    description: Creates a record in Aprimo from an existing file.
    runtime: go1.x
    events:
      - sqs:
          arn: !GetAtt SQSAprimoRecord.Arn
    package:
      patterns:
        - './bin/aprimo-create-record'
    environment:
      APRIMO_TENANT: ${env:APRIMO_TENANT}
      APRIMO_CLIENT_ID: ${env:APRIMO_CLIENT_ID}
      APRIMO_CLIENT_SECRET: ${env:APRIMO_CLIENT_SECRET}
  guestApprove:
    name: gateway-${opt:stage}-guest-approve
    handler: bin/guest-approve
    description: Approve an invited guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest/approve
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/guest-approve/schema.json)}
                name: PostGuestApproveModel
                description: Validation model for approving a guest user invitation.
    package:
      patterns:
        - './bin/guest-approve'
    environment:
      AWS_SES_REGION: ${env:AWS_SES_REGION}
      EMAIL_REDIRECT_URL: ${env:CLIENT_URL}/partner-login
      SOURCE_EMAIL_ADDRESS: ${env:AWS_SES_EMAIL}
  guestAuth:
    name: gateway-${opt:stage}-guest-auth
    handler: bin/guest-auth
    description: Authenticate a guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest/auth
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/guest-auth/schema.json)}
                name: PostGuestAuthModel
                description: Validation model for authentication a guest user.
    package:
      patterns:
        - './bin/guest-auth'
  guestDeactivate:
    name: gateway-${opt:stage}-guest-deactivate
    handler: bin/guest-deactivate
    description: Deactivate a single guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest
          method: delete
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                id: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-deactivate'
  guestGet:
    name: gateway-${opt:stage}-guest-get
    handler: bin/guest-get
    description: Retrieve a single guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          request:
            parameters:
              querystrings:
                id: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-get'
  guestUpdate:
    name: gateway-${opt:stage}-guest-update
    handler: bin/guest-update
    description: Update a guest users.
    runtime: go1.x
    events:
      - http:
          path: /guest
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/guest-update/schema.json)}
                name: PutGuestModel
                description: Validation model for updating a guest user.
    package:
      patterns:
        - './bin/guest-update'
  guestsGet:
    name: gateway-${opt:stage}-guests-get
    handler: bin/guests-get
    description: Retrieve a list of guest users.
    runtime: go1.x
    events:
      - http:
          path: /guests
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/guests-get/schema.json)}
                name: PostGuestsModel
                description: Validation model for requesting a list of guests.
    package:
      patterns:
        - './bin/guests-get'
  guestsPending:
    name: gateway-${opt:stage}-guests-pending
    handler: bin/guests-pending
    description: Retrieve a list of pending guest invites.
    runtime: go1.x
    events:
      - http:
          path: /guests/pending
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/guests-pending/schema.json)}
                name: PostGuestsPendingModel
                description: Validation model for requesting a list of pending invites.
    package:
      patterns:
        - './bin/guests-pending'
  initDB:
    name: gateway-${opt:stage}-init-db
    handler: bin/init-db
    description: Initialize the application database with the necessary tables.
    runtime: go1.x
    package:
      patterns:
        - './bin/init-db'
  teamCreate:
    name: gateway-${opt:stage}-team-create
    handler: bin/team-create
    description: Create a new team.
    runtime: go1.x
    events:
      - http:
          path: /team
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/team-create/schema.json)}
                name: PostTeamModel
                description: Validation model for creating a new team.
    package:
      patterns:
        - './bin/team-create'
  teamUpdate:
    name: gateway-${opt:stage}-team-update
    handler: bin/team-update
    description: Edit the data for an exiting team.
    runtime: go1.x
    events:
      - http:
          path: /team
          method: put
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/team-update/schema.json)}
                name: PutTeamModel
                description: Validation model for updating a team.
    package:
      patterns:
        - './bin/team-update'
  teamsGet:
    name: gateway-${opt:stage}-teams-get
    handler: bin/teams-get
    description: Retrieve the list of teams.
    runtime: go1.x
    events:
      - http:
          path: /teams
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/teams-get'
  creds2FA:
    name: gateway-${opt:stage}-creds-2fa
    handler: bin/creds-2fa
    description: Generate a 2FA code for the guest user.
    runtime: go1.x
    events:
      - http:
          path: /creds/2fa
          method: get
          request:
            parameters:
              querystrings:
                username: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/creds-2fa'
    environment:
      EMAIL_QUEUE: !Ref SQSSend2FA
  credsSalt:
    name: gateway-${opt:stage}-creds-retrieve
    handler: bin/creds-salt
    description: Retrieve a users hashing salt.
    runtime: go1.x
    events:
      - http:
          path: /creds/salt
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/creds-salt'
  credsPropose:
    name: gateway-${opt:stage}-creds-propose
    handler: bin/creds-propose
    description: Records a proposed guest user invitation and generates credentials for this user.
    runtime: go1.x
    events:
      - http:
          path: /creds/propose
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/creds-propose/schema.json)}
                name: PostCredsProposeModel
                description: Validation model for proposing an invite.
    package:
      patterns:
        - './bin/creds-propose'
    environment:
      SOURCE_EMAIL_ADDRESS: ${env:AWS_SES_EMAIL}
      AWS_SES_REGION: ${env:AWS_SES_REGION}
  credsProvision:
    name: gateway-${opt:stage}-creds-provision
    handler: bin/creds-provision
    description: Records a guest user invitation and generates credentials for this user.
    runtime: go1.x
    events:
      - http:
          path: /creds/provision
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/creds-provision/schema.json)}
                name: PostCredsProvisionModel
                description: Validation model for inviting a new guest.
    package:
      patterns:
        - './bin/creds-provision'
    environment:
      AWS_SES_REGION: ${env:AWS_SES_REGION}
      EMAIL_REDIRECT_URL: ${env:CLIENT_URL}/partner-login
      SOURCE_EMAIL_ADDRESS: ${env:AWS_SES_EMAIL}
  seedDB:
    name: gateway-${opt:stage}-seed-db
    handler: bin/seed-db
    description: Read an uploaded seed file and and update the database accordingly.
    runtime: go1.x
    events:
      - s3:
          bucket: !Ref StaticSiteBucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: seed/
    package:
      patterns:
        - './bin/seed-db'
  uploadMetadata:
    name: gateway-${opt:stage}-upload-metadata
    handler: bin/upload-metadata
    description: Records a file upload record.
    runtime: go1.x
    events:
      - http:
          path: /upload
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/upload-metadata'
  uploadPresignedUrl:
    name: gateway-${opt:stage}-upload-presigned-url
    handler: bin/upload-presigned-url
    description: Return a presigned URL from S3 to upload a specific file.
    runtime: go1.x
    events:
      - http:
          path: /upload
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/upload-presigned-url'
    environment:
      S3_UPLOAD_BUCKET: commons-gateway-${opt:stage}-upload
  uploaderGet:
    name: gateway-${opt:stage}-uploader-get
    handler: bin/uploader-get
    description: Return a list of uploaders for a specific team.
    runtime: go1.x
    events:
      - http:
          path: /guests/uploaders
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
          cors: ${file(./config/${param:deployment}.json):cors}
          request:
            schemas:
              application/json:
                schema: ${file(./funcs/uploader-get/schema.json)}
                name: PostUploaderModel
                description: Validation model for retrieving guests from a given team.
    package:
      patterns:
        - './bin/uploader-get'
  email2fa:
    name: gateway-${opt:stage}-email-2fa
    handler: bin/email-2fa
    description: Email an invitee their temporary verification code.
    runtime: go1.x
    events:
      - sqs:
          arn: !GetAtt SQSSend2FA.Arn
    package:
      patterns:
        - './bin/email-2fa'
    environment:
      SOURCE_EMAIL_ADDRESS: ${env:AWS_SES_EMAIL}
      AWS_SES_REGION: ${env:AWS_SES_REGION}
