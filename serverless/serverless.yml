service: commons-gateway

frameworkVersion: '3'

plugins:
  - serverless-deployment-bucket

# Set the deployment type to dev for a stages except `prod`
# This mostly impacts the how CloudFormation allocates resources.
params:
  default:
    deployment: dev
    rollback: false
  prod:
    deployment: prod
    rollback: false

provider:
  name: aws
  region: us-east-1
  iam:
    role:
      name: CommonsGatewayLambdaRole-${opt:stage}
      statements:
        - Effect: Allow
          Action: rds-db:connect
          Resource: !Join
            - ''
            - - 'arn:aws:rds-db:${aws:region}:${aws:accountId}:dbuser:'
              - !Select [6, !Split [':', !GetAtt RDSProxy.DBProxyArn]]
              - /*
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectTagging
          Resource: !Join
            - ''
            - - !GetAtt UploadBucket.Arn
              - /*
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref SubnetA
      - !Ref SubnetB
  environment:
    DB_HOST: ${self:custom.PROXY_ENDPOINT}
    DB_NAME: ${self:custom.DB_NAME}
    DB_PORT: ${self:custom.DB_PORT}
    DB_USER: ${self:custom.DB_USER}
  deploymentBucket:
    name: gpalab-automatic-deployments-${param:deployment}
  disableRollback: ${param:rollback}

custom:
  CIDR: 10.0.0.0/16
  DB_NAME: gateway_${opt:stage}
  DB_USER: gateway${opt:stage}
  DB_PORT: !GetAtt RDSInstance.Endpoint.Port
  PROXY_NAME: commons-gateway-proxy-${opt:stage}
  PROXY_ENDPOINT: !GetAtt RDSProxy.Endpoint

resources:
  - ${file(./config/resources/vpc.yml)}
  - ${file(./config/resources/rds.yml)}
  - ${file(./config/resources/proxy.yml)}
  - ${file(./config/resources/s3.yml)}
  - ${file(./config/resources/cloudfront.yml)}
  - ${file(./config/resources/nat.yml)}

# Defines how the functions are deployed. To reduce the functions
# size for each Lambda, we package them independently. This requires
# us to set the package pattern individually per function.
package:
  individually: true
  patterns:
    - '!./**'

functions:
  adminCreate:
    name: gateway-${opt:stage}-admin-create
    handler: bin/admin-create
    description: Add an new email to the list of admin users.
    runtime: go1.x
    events:
      - http:
          path: /admin/create
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admin-create'
  adminDeactivate:
    name: gateway-${opt:stage}-admin-deactivate
    handler: bin/admin-deactivate
    description: Deactivate a single admin user.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: delete
          request:
            parameters:
              querystrings:
                username: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admin-deactivate'
  adminUpdate:
    name: gateway-${opt:stage}-admin-update
    handler: bin/admin-update
    description: Update a admin users.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: put
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admin-update'
  adminGet:
    name: gateway-${opt:stage}-admin-get
    handler: bin/admin-get
    description: Retrieve an individual admin user.
    runtime: go1.x
    events:
      - http:
          path: /admin
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admin-get'
  adminsGet:
    name: gateway-${opt:stage}-admins-get
    handler: bin/admins-get
    description: Retrieve the list of admin users.
    runtime: go1.x
    events:
      - http:
          path: /admins
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/admins-get'
  guestApprove:
    name: gateway-${opt:stage}-guest-approve
    handler: bin/guest-approve
    description: Approve an invited guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest/approve
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-approve'
    environment:
      SOURCE_EMAIL_ADDRESS: ryan@gpalab.digital
      AWS_SES_REGION: us-east-1
  guestAuth:
    name: gateway-${opt:stage}-guest-auth
    handler: bin/guest-auth
    description: Authenticate a guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest/auth
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-auth'
  guestDeactivate:
    name: gateway-${opt:stage}-guest-deactivate
    handler: bin/guest-deactivate
    description: Deactivate a single guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest
          method: delete
          request:
            parameters:
              querystrings:
                id: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-deactivate'
  guestGet:
    name: gateway-${opt:stage}-guest-get
    handler: bin/guest-get
    description: Retrieve a single guest user.
    runtime: go1.x
    events:
      - http:
          path: /guest
          method: get
          request:
            parameters:
              querystrings:
                id: true
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-get'
  guestUpdate:
    name: gateway-${opt:stage}-guest-update
    handler: bin/guest-update
    description: Update a guest users.
    runtime: go1.x
    events:
      - http:
          path: /guest/update
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guest-update'
  guestsGet:
    name: gateway-${opt:stage}-guests-get
    handler: bin/guests-get
    description: Retrieve a list of guest users.
    runtime: go1.x
    events:
      - http:
          path: /guests
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guests-get'
  guestsPending:
    name: gateway-${opt:stage}-guests-pending
    handler: bin/guests-pending
    description: Retrieve a list of pending guest invites.
    runtime: go1.x
    events:
      - http:
          path: /guests/pending
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/guests-pending'
  initDB:
    name: gateway-${opt:stage}-init-db
    handler: bin/init-db
    description: Initialize the application database with the necessary tables.
    runtime: go1.x
    package:
      patterns:
        - './bin/init-db'
  teamCreate:
    name: gateway-${opt:stage}-team-create
    handler: bin/team-create
    description: Create a new team.
    runtime: go1.x
    events:
      - http:
          path: /team/create
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/team-create'
  teamUpdate:
    name: gateway-${opt:stage}-team-update
    handler: bin/team-update
    description: Edit the data for an exiting team.
    runtime: go1.x
    events:
      - http:
          path: /team/update
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/team-update'
  teamsGet:
    name: gateway-${opt:stage}-teams-get
    handler: bin/teams-get
    description: Retrieve the list of teams.
    runtime: go1.x
    events:
      - http:
          path: /teams
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/teams-get'
  credsSalt:
    name: gateway-${opt:stage}-creds-retrieve
    handler: bin/creds-salt
    description: Retrieve a users hashing salt.
    runtime: go1.x
    events:
      - http:
          path: /creds/salt
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/creds-salt'
  credsPropose:
    name: gateway-${opt:stage}-creds-propose
    handler: bin/creds-propose
    description: Records a proposed guest user invitation and generates credentials for this user.
    runtime: go1.x
    events:
      - http:
          path: /creds/propose
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/creds-propose'
    environment:
      SOURCE_EMAIL_ADDRESS: ryan@gpalab.digital
      AWS_SES_REGION: us-east-1
  credsProvision:
    name: gateway-${opt:stage}-creds-provision
    handler: bin/creds-provision
    description: Records a guest user invitation and generates credentials for this user.
    runtime: go1.x
    events:
      - http:
          path: /creds/provision
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/creds-provision'
    environment:
      SOURCE_EMAIL_ADDRESS: ryan@gpalab.digital
      AWS_SES_REGION: us-east-1
  uploadMetadata:
    name: gateway-${opt:stage}-upload-metadata
    handler: bin/upload-metadata
    description: Records a file upload record.
    runtime: go1.x
    events:
      - http:
          path: /upload
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/upload-metadata'
  uploadPresignedUrl:
    name: gateway-${opt:stage}-upload-presigned-url
    handler: bin/upload-presigned-url
    description: Return a presigned URL from S3 to upload a specific file.
    runtime: go1.x
    events:
      - http:
          path: /upload
          method: get
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/upload-presigned-url'
    environment:
      S3_UPLOAD_BUCKET: commons-gateway-${opt:stage}-upload
  uploaderGet:
    name: gateway-${opt:stage}-uploader-get
    handler: bin/uploader-get
    description: Return a list of uploaders for a specific team.
    runtime: go1.x
    events:
      - http:
          path: /guests/uploaders
          method: post
          cors: ${file(./config/${param:deployment}.json):cors}
    package:
      patterns:
        - './bin/uploader-get'
  email2fa:
    name: gateway-${opt:stage}-email-2fa
    handler: funcs/email-2fa/dist/index.handler
    description: Email an invitee their temporary verification code.
    runtime: nodejs18.x
    events:
      - sqs: arn:aws:sqs:${aws:region}:${aws:accountId}:contentCommons-email-2fa
    package:
      patterns:
        - 'funcs/email-2fa/dist/index.cjs'
