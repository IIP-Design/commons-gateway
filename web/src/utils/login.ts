// ////////////////////////////////////////////////////////////////////////////
// AWS Imports
// ////////////////////////////////////////////////////////////////////////////
import { Amplify, Auth } from 'aws-amplify';

// ////////////////////////////////////////////////////////////////////////////
// Local Imports
// ////////////////////////////////////////////////////////////////////////////
import {
  accessToken,
  clearCurrentUser,
  loginStatus,
  setCurrentUser,
} from '../stores/current-user';
import { buildQuery } from './api';
import { AMPLIFY_CONFIG } from './constants';
import { derivePasswordHash } from './hashing';
import { extractTokenFields } from './jwt';
import { isLoggedInAsAdmin } from './auth';

// ////////////////////////////////////////////////////////////////////////////
// Admin/DoS
// ////////////////////////////////////////////////////////////////////////////

export const handleFederatedLogin = async () => {
  Amplify.configure( AMPLIFY_CONFIG );

  await Auth.federatedSignIn( {
    provider: import.meta.env.PUBLIC_COGNITO_OKTA_PROVIDER_NAME,
  } );

  // Needed due to limitations of Cognito
  loginStatus.set( 'loggedIn' );
};

/**
 * Initiates a federated Okta login through Cognito. If successful,
 * updates the current user store with the relevant data.
 */
export const handleAdminLogin = async () => {
  // Needed due to limitations of Cognito
  if ( loginStatus.get() === 'loggedOut' ) {
    return false;
  }

  let authenticated = false;

  Amplify.configure( AMPLIFY_CONFIG );

  try {
    const user = await Auth.currentAuthenticatedUser( { bypassCache: true } );

    if ( user ) {
      const payload = user?.signInUserSession?.idToken?.payload;
      const { email, exp } = payload;

      // Retrieve additional data from the application.
      const response = await buildQuery( `admin?username=${email}`, null, 'GET' );
      const { data } = await response.json();
      const { active, role, team, token } = data;

      // Add the required data from the id token to the current user store.
      if ( active ) {
        setCurrentUser( { email, team, role, exp } );
        loginStatus.set( 'loggedIn' );
        accessToken.set( token );

        authenticated = true;
      }
    }
  } catch ( err ) {
    console.error( err );
  }

  return authenticated;
};

// ////////////////////////////////////////////////////////////////////////////
// Partner
// ////////////////////////////////////////////////////////////////////////////
/**
 * Retrieves the salt value used to hash the user's password.
 * @param username The name of the user to look up.
 * @returns The salt value (if the user exits).
 */
export const getUserPasswordSalt = async ( username: string ) => {
  const response = await buildQuery( 'creds/salt', { username } );
  const { data, error } = await response.json();

  return [data, error];
};

/**
 * Send the locally generated password hash to the server to authenticate user and request access.
 * @param hash The locally generated password hash.
 * @param username The email of the user attempting to log in.
 * @param mfa The user submitted 2fa code along with the accompanying 2fa request id.
 * @param token The optional captcha token generated by turnstile.
 */
const submitUserPasswordHash = async (
  hash: string,
  username: string,
  mfa: IMfaRequest,
  token: string,
): Promise<Nullable<string>> => {
  const response = await buildQuery( 'guest/auth', {
    hash,
    username,
    mfa,
    token,
  } );

  const { data } = await response.json();

  if ( data ) {
    const parsed = JSON.parse( data );

    return parsed.token ?? null;
  }

  return null;
};

/**
 * Initiates the creation of a 2FA code.
 * @param username The email address of the user requesting a 2FA code
 */
export const handleMfaRequest = async ( username: string ) => {
  const response = await buildQuery( `creds/2fa?username=${username}`, null, 'GET' );
  const { data } = await response.json();

  return data?.requestId;
};

/**
 * Send the locally generated password hash to the server to authenticate user and request access.
 * @param username The email of the user attempting to log in.
 * @param password The user-provided password value.
 * @param mfa The user submitted 2fa code along with the accompanying 2fa request id.
 * @param token The optional captcha token generated by turnstile.
 */
export const handlePartnerLogin = async ( username: string, password: string, mfa: IMfaRequest, token: string ) => {
  let authenticated = false;

  try {
    const [{ salt }, saltError] = await getUserPasswordSalt( username );

    if ( !salt ) {
      return [authenticated, saltError];
    }

    const localHash = await derivePasswordHash( password, salt );
    const jwt = await submitUserPasswordHash( localHash, username, mfa, token );

    if ( !jwt ) {
      return [authenticated, null];
    }

    accessToken.set( jwt );

    const { exp, firstLogin } = extractTokenFields( jwt );

    // Retrieve additional data from the application.
    const response = await buildQuery( `guest?id=${username}`, null, 'GET' );
    const { data } = await response.json();
    const { role, team } = data;

    // Add the required data from the id token to the current user store.
    setCurrentUser( { email: username, team, role, exp } );

    if ( firstLogin ) {
      loginStatus.set( 'firstLogin' );
    } else {
      loginStatus.set( 'loggedIn' );
    }


    authenticated = true;
  } catch ( err ) {
    console.error( 'Login failed.' );
  }

  return [authenticated, null];
};

// ////////////////////////////////////////////////////////////////////////////
// Common
// ////////////////////////////////////////////////////////////////////////////

export const logout = async () => {
  try {
    // For UX
    const isAdmin = isLoggedInAsAdmin();

    // Admin signout, though this doesn't always work
    await Auth.signOut();

    // Partner signout
    accessToken.set( '' );

    // Common signout
    clearCurrentUser();
    loginStatus.set( 'loggedOut' );
    window.location.replace( isAdmin ? '/admin-login' : '/partner-login' );
  } catch ( err ) {
    console.error( 'error signing out', err );
  }
};
