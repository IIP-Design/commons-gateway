---
interface Props {
  droppable?: boolean;
  narrow?: boolean;
  title: string;
}

const { droppable, narrow, title } = Astro.props;

const determineDroppable = (droppable?: boolean) => {
  // Default to droppable unless caller explicitly requests otherwise
  if (droppable ?? true) {
    return '';
  }

  return 'return false;';
};
---

<div class={narrow ? 'container narrow' : 'container'} ondrop={determineDroppable(droppable)}>
  <div class="content">
    <h1>{title}</h1>
    <slot />
  </div>
  <p class="support">
    For assistance, please contact <a href="mailto:commonssupport@state.gov"
      >commonssupport@state.gov</a
    >
  </p>
</div>

<style lang="scss">
  @use '../styles/breakpoints.scss' as *;

  .container {
    border: 1px solid var(--greyLight);
    border-radius: 5px;
    display: grid;
    grid-template-rows: 1fr auto;
    position: relative;
    margin: 0 auto;
    max-width: 1755px;
    min-height: 100%;
    padding: 1rem;

    @include breakpoint('tablet') {
      padding: 3rem 3rem 2rem;
    }
  }
  .narrow {
    max-width: 1021px;
  }
  .support {
    margin-top: 1rem;
    font-size: var(--fontSizeSmall);
    text-align: center;
    color: var(--mine-shaft-1); // Official DoS grey colors here do not meet contrast requirements
    z-index: 1;

    > a {
      color: var(--blue);
    }

    @include breakpoint('tablet') {
      font-size: var(--fontSizeNormal);
    }
  }
</style>
